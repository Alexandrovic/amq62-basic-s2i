---
kind: Template
apiVersion: v1
metadata:
  annotations:
    description: Application template for JBoss A-MQ brokers. These can be deployed
      as standalone and use persistent storage for saving messages. This template
      doesn't feature SSL support.
    iconClass: icon-jboss
    tags: messaging,amq,jboss,xpaas
    version: 1.3.1
  name: amq62-s2i-persistent
labels:
  template: amq62-s2i-persistent
  xpaas: 1.3.1
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  value: broker
  required: true
- description: Git source URI for application.
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/abouchama/amq62-basic-s2i.git
  required: true
- description: Git branch/tag reference.
  name: SOURCE_REPOSITORY_REF
  value: master
  required: true
- description: Path within Git project to build; empty for root project directory.
  name: CONTEXT_DIR
  value: deployment
  required: true
- description: Split the data directory for each node in a mesh.
  name: AMQ_SPLIT
  value: 'false'
  required: false
- description: 'Protocols to configure, separated by commas.  Allowed values are:
    `openwire`, `amqp`, `stomp` and `mqtt`.'
  name: MQ_PROTOCOL
  value: openwire
  required: false
- description: Queue names, separated by commas.  These queues will be automatically
    created when the broker starts.  If left empty, queues will be still created dynamically.
  name: MQ_QUEUES
  value: ''
  required: false
- description: Topic names, separated by commas.  These topics will be automatically
    created when the broker starts.  If left empty, topics will be still created dynamically.
  name: MQ_TOPICS
  value: ''
  required: false
- description: List of packages that are allowed to be serialized for use in ObjectMessage,
    separated by commas. If your app doesn't use ObjectMessages, leave this blank.
    This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html
  name: MQ_SERIALIZABLE_PACKAGES
  value: ''
  required: false
- description: Size of persistent storage for database volume.
  name: VOLUME_CAPACITY
  value: 512Mi
  required: true
- description: User name for standard broker user.  It is required for connecting
    to the broker.  If left empty, it will be generated.
  name: MQ_USERNAME
  from: user[a-zA-Z0-9]{3}
  generate: expression
  required: false
- description: Password for standard broker user.  It is required for connecting to
    the broker.  If left empty, it will be generated.
  name: MQ_PASSWORD
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: false
- description: The discovery agent type to use for discovering mesh endpoints.  'dns'
    will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes
    REST API to resolve service endpoints.  If using 'kube' the service account for
    the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user
    view system:serviceaccount:<namespace>:default' where <namespace> is the project
    namespace.
  name: AMQ_MESH_DISCOVERY_TYPE
  value: kube
  required: false
- description: The A-MQ storage usage limit
  name: AMQ_STORAGE_USAGE_LIMIT
  value: 100 gb
  required: false
- description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  name: IMAGE_STREAM_NAMESPACE
  value: openshift
  required: true

objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      application: ${APPLICATION_NAME}

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      application: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        forcePull: true
        from:
          kind: ImageStreamTag
          name: jboss-amq-62:1.3-11
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-claim
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}


- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
    strategy:
      type: Rolling
      rollingParams:
        intervalSeconds: 1
        maxSurge: 0
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-amq
        name: ${APPLICATION_NAME}-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: ${MQ_USERNAME}
          - name: AMQ_PASSWORD
            value: ${MQ_PASSWORD}
          - name: AMQ_TRANSPORTS
            value: ${MQ_PROTOCOL}
          - name: AMQ_MESH_DISCOVERY_TYPE
            value: ${AMQ_MESH_DISCOVERY_TYPE}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${APPLICATION_NAME}
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: jboss-amq-62
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-amq
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
          volumeMounts:
          - mountPath: /etc/amq-secret-volume
            name: broker-secret-volume
            readOnly: true
          - mountPath: /opt/amq/data
            name: ${APPLICATION_NAME}-amq-pvol
            readOnly: false
        serviceAccount: amq-service-account
        terminationGracePeriodSeconds: 60
        volumes:
        - name: broker-secret-volume
          secret:
            secretName: ${AMQ_SECRET}
        - name: ${APPLICATION_NAME}-amq-pvol
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-amq-claim
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-amq
        from:
          kind: ImageStream
          name: ${APPLICATION_NAME}
    - type: ConfigChange

- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}
    annotations:
      description: Service for all the protocols (not all may be enabled!)
    labels:
      application: ${APPLICATION_NAME}
  spec:
    ports:
    - name: tcp
      port: 61616
      targetPort: 61616
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: mqtt
      port: 1883
      targetPort: 1883
    - name: stomp
      port: 61613
      targetPort: 61613
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
